package models

import "github.com/boltdb/bolt"

// User represents a minimalist relying party user. The Hanko Authentication API manages credentials, not users. So you
// need to keep the user information yourself.
type User struct {
	ID   string // contains the user id, generated by the relying party
	Name string // contains the user name
}

// NewUser creates a new user object.
func NewUser(id string, name string) *User {
	return &User{ID: id, Name: name}
}

// FindUserByName used to look up the user with the specified user name.
func FindUserByName(name string) (user *User, err error) {
	err = DB.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		v := b.Get([]byte(name))
		if len(v) != 0 {
			user = &User{ID: string(v), Name: name}
		}
		return nil
	})
	return user, err
}

func FindUserById(id string) (user *User, err error) {
	err = DB.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		v := b.ForEach(func(k, v []byte) error {
			storedId := string(v)
			if id == storedId {
				user = &User{ID:   storedId, Name: string(k)}
			}
			return nil
		})
		return v
	})

	return user, err
}

// Save persists the user information.
func (u *User) Save() (err error) {
	err = DB.Update(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Users"))
		return b.Put([]byte(u.Name), []byte(u.ID))
	})
	return err
}